{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>In this guide, we will walk you through configuring a system of microservices with Istio in sidecar mode.</p> <p>In the setup section, you will install Istio, deploy a sample application, configure a variety of service mesh resources (security and traffic policy) and verify that they all function.</p> <p>The subsequent section walks you through performing a migration to ambient mesh.  That is, eliminating the use of sidecars altogether, while at the same time preserving your mesh policies and configurations.</p> <p>Ambient mesh provides a stronger separation of your workloads from the mesh platform, where the proxies involved in implementing your policies are no longer coupled to your deployments.</p> <p>For complete and thorough documentation on Istio Ambient Mesh, visit www.ambientmesh.io.</p>"},{"location":"migrate/","title":"Migrate to Ambient","text":""},{"location":"migrate/#download-the-migration-tool","title":"Download the migration tool","text":"<p>Per the documented instructions, we can obtain the migration helper with:</p> <pre><code>curl -sL https://storage.googleapis.com/gloo-cli/install.sh | sh\n</code></pre> <p>The output tells us that we can add the <code>gloo</code> binary to our path with:</p> <pre><code>export PATH=$HOME/.gloo/bin:$PATH\n</code></pre> <p>The command comes with different options flag, but the general form of the command we will run is:</p> <pre><code>gloo ambient migrate\n</code></pre>"},{"location":"migrate/#try-the-migration-tool","title":"Try the migration tool","text":"<p>Try the migration helper now:</p> <pre><code>gloo ambient migrate\n</code></pre> <p>Study the output:</p> <pre><code>\u2022 Starting phase pre-reqs...\n\u2705 Phase pre-reqs succeeded!\n  \u2705 Cluster CNI compatibility: passed\n  \u2705 Istio version compatibility: passed\n  \u2705 Multicluster usage compatibility: passed\n  \u2705 Virtual Machine usage compatibility: passed\n  \u2705 SPIRE usage compatibility: passed\n\n\u2022 Starting phase cluster-setup...\n\u274c Phase cluster-setup failed!\n  \u274c Ambient mode enabled: failed. 1 error occurred:\n        * istiod istio-system/istiod must have 'PILOT_ENABLE_AMBIENT=true'. Upgrade Istio with '--set profile=ambient'.\n\n\n  \u274c DaemonSets deployed: failed. 1 error occurred:\n        * ztunnel not found\n\n\n  \u274c Sidecars support ambient mode: failed. 7 errors occurred:\n        * Sidecar backend/details-v1-7d775cb4f6-s657b is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar backend/ratings-v1-5b896f8544-h7qw6 is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar backend/reviews-v1-746f96c9d4-55wxl is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar backend/reviews-v2-97bdf5876-r5kg9 is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar backend/reviews-v3-77d9db6844-fbwf6 is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar frontend/curl-5b549b49b8-xthm5 is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar frontend/productpage-v1-85b8f8d74b-tsw5q is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n\n\n  \u2705 Required CRDs installed: passed\n</code></pre> <p>This output should begin to provide a validation for our plan:</p> <ul> <li> <p>Among other things, it validates Istio version and Cluster CNI compatibility.  If we had used too old a version of Istio, the tool would have raised a concern, and our first priority would be to upgrade Istio to a newer version.</p> </li> <li> <p>We also get a validation that all necessary CRDs are installed.  I assume the reference is to the Gateway API CRDs.</p> </li> </ul> <p>The tool also helps us look forward and tells us what's not yet in place:</p> <ul> <li>We haven't yet upgraded to ambient mode.  We're told to use the <code>--set profile=ambient</code> flag.</li> <li>ztunnel is not yet installed</li> </ul> <p>Let's get to work.</p>"},{"location":"migrate/#upgrade-istio","title":"Upgrade Istio","text":""},{"location":"migrate/#upgrade-the-cni-to-use-the-ambient-profile","title":"Upgrade the CNI to use the ambient profile:","text":"<pre><code>helm upgrade istio-cni istio/cni -n istio-system \\\n  --set global.platform=k3d --set profile=ambient --wait\n</code></pre>"},{"location":"migrate/#upgrade-istiod-with-the-ambient-profile","title":"Upgrade <code>istiod</code> with the ambient profile","text":"<pre><code>helm upgrade istiod istio/istiod -n istio-system --set profile=ambient --wait\n</code></pre>"},{"location":"migrate/#install-ztunnel","title":"Install ztunnel","text":"<pre><code>helm install ztunnel istio/ztunnel -n istio-system --set global.platform=k3d --wait\n</code></pre>"},{"location":"migrate/#validate-the-upgrade","title":"Validate the upgrade","text":"<p>List all Helm installations:</p> <pre><code>helm ls -A\n</code></pre> <p>The output should corroborate that all components are installed, along with their versions.</p> <pre><code>NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION\nistio-base      istio-system    1               2025-06-04 15:01:02.654247 +0700 +07    deployed        base-1.26.1     1.26.1\nistio-cni       istio-system    2               2025-06-05 11:34:51.192029 +0700 +07    deployed        cni-1.26.1      1.26.1\nistiod          istio-system    2               2025-06-05 11:34:59.327015 +0700 +07    deployed        istiod-1.26.1   1.26.1\nztunnel         istio-system    1               2025-06-05 11:35:38.388524 +0700 +07    deployed        ztunnel-1.26.1  1.26.1\n</code></pre> <p>Next, list all pods in the <code>istio-system</code> namespace:</p> <pre><code>kubectl get pod -n istio-system\n</code></pre> <p>The output should indicate that the CNI agent, <code>ztunnel</code>, and <code>istiod</code> are all running:</p> <pre><code>NAME                      READY   STATUS    RESTARTS   AGE\nistio-cni-node-wsld7      1/1     Running   0          2m25s\nistiod-86849665c6-87lvg   1/1     Running   0          2m17s\nztunnel-zkzn8             1/1     Running   0          99s\n</code></pre>"},{"location":"migrate/#migration-assistant-whats-next","title":"Migration assistant, what's next?","text":"<p>This is a good time to re-run the migration tool to see where we stand:</p> <pre><code>gloo ambient migrate\n</code></pre> <p>The output has changed:</p> <pre><code>\u2022 Starting phase pre-reqs...\n\u2705 Phase pre-reqs succeeded!\n  \u2705 Cluster CNI compatibility: passed\n  \u2705 Istio version compatibility: passed\n  \u2705 Multicluster usage compatibility: passed\n  \u2705 Virtual Machine usage compatibility: passed\n  \u2705 SPIRE usage compatibility: passed\n\n\u2022 Starting phase cluster-setup...\n\u274c Phase cluster-setup failed!\n  \u2705 Ambient mode enabled: passed\n  \u2705 DaemonSets deployed: passed\n  \u274c Sidecars support ambient mode: failed. 7 errors occurred:\n        * Sidecar backend/details-v1-7d775cb4f6-s657b is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar backend/ratings-v1-5b896f8544-h7qw6 is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar backend/reviews-v1-746f96c9d4-55wxl is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar backend/reviews-v2-97bdf5876-r5kg9 is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar backend/reviews-v3-77d9db6844-fbwf6 is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar frontend/curl-5b549b49b8-xthm5 is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n        * Sidecar frontend/productpage-v1-85b8f8d74b-tsw5q is missing 'ENABLE_HBONE'. Upgrade Istio with '--set profile=ambient' and restart the pod.\n\n\n  \u2705 Required CRDs installed: passed\n</code></pre> <p>In ambient mode, sidecar workloads must have the HBONE protocol enabled in order to communicate with sidecarless workloads.</p> <p>In order to effect that change, the assistant instructs us to restart the pods that represent our workloads.</p> <p>This is a good example of a step that we hadn't considered in our plan.</p> <p>In scenarios where we expect to run a mix of workloads, some sidecar-based and others sidecarless, this step would be important.</p> <p>Go ahead and heed the recommendation by restarting the workloads:</p> <p><pre><code>kubectl rollout restart deploy -n backend\n</code></pre> And:</p> <pre><code>kubectl rollout restart deploy -n frontend\n</code></pre> <p>Note that the above are still running sidecars.</p>"},{"location":"migrate/#assistant-whats-next","title":"Assistant, what's next?","text":"<p>You know the drill by now:</p> <pre><code>gloo ambient migrate\n</code></pre> <p>Here is the salient output:</p> <pre><code>\u2022 Starting phase deploy-waypoints...\n\u26a0 Phase deploy-waypoints has recommendations!\n  \ud83d\udd2e Namespace \"backend\" might require a waypoint for the following services:\n     * Service \"backend/details\" selected workload apps/v1/Deployment/backend/details-v1 requires a waypoint:\n         AuthorizationPolicy backend/details-authz requires a waypoint due to HTTP attributes (methods)\n\n     * Service \"backend/details-v1\" selected workload apps/v1/Deployment/backend/details-v1 requires a waypoint:\n         AuthorizationPolicy backend/details-authz requires a waypoint due to HTTP attributes (methods)\n\n     * Service \"backend/ratings\" selected workload apps/v1/Deployment/backend/ratings-v1 requires a waypoint:\n         AuthorizationPolicy backend/ratings-authz requires a waypoint due to HTTP attributes (methods)\n\n     * Service \"backend/ratings-v1\" selected workload apps/v1/Deployment/backend/ratings-v1 requires a waypoint:\n         AuthorizationPolicy backend/ratings-authz requires a waypoint due to HTTP attributes (methods)\n\n\n  \u2139 Generated waypoints written to /tmp/istio-migrate/recommended-waypoints.yaml\n</code></pre> <p>The assistant has validated our analysis that:</p> <ul> <li>The authorization policies on backend services require a waypoint.</li> <li>The authorization policy on frontend services do not necessitate a waypoint.</li> </ul> <p>It's interesting that it hasn't determined that <code>reviews</code> needs a waypoint too, on account of its traffic policy.</p> <p>On the other hand, it's awfully nice to see a generated waypoint provided by the assistant:</p> <pre><code>cat /tmp/istio-migrate/recommended-waypoints.yaml\n</code></pre> <p>Here is the generated waypoint, it's a Gateway resource:</p> <pre><code>apiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: waypoint\n  namespace: backend\nspec:\n  gatewayClassName: istio-waypoint\n  listeners:\n  - name: mesh\n    port: 15008\n    protocol: HBONE\n</code></pre>"},{"location":"migrate/#deploy-the-waypoint","title":"Deploy the waypoint","text":"<p>Apply the recommended waypoint:</p> <pre><code>kubectl apply -f /tmp/istio-migrate/recommended-waypoints.yaml\n</code></pre> <p>Note however that just applying the waypoint does not also bind it to specific workloads.</p> <p>Verify that the waypoint is present in the <code>backend</code> namespace:</p> <pre><code>istioctl waypoint list -n backend\n</code></pre> <p>Here is the output:</p> <pre><code>NAME         REVISION     PROGRAMMED\nwaypoint     default      True\n</code></pre>"},{"location":"migrate/#back-to-the-assistant","title":"Back to the Assistant","text":"<p>Re-run the assistant:</p> <pre><code>gloo ambient migrate\n</code></pre> <p>Study the output:</p> <pre><code>...\n\u2022 Starting phase migrate-policies...\n\u26a0 Phase migrate-policies has recommendations!\n  \ud83d\udd2e Apply security.istio.io/v1/AuthorizationPolicy/backend/details-from-waypoint: v1/Service/backend/details must allow traffic from its waypoint.\n  \ud83d\udd2e Apply security.istio.io/v1/AuthorizationPolicy/backend/details-details-authz: Existing configuration is copied from policy backend/details-authz to be enforced at the waypoint.\n  \ud83d\udd2e Apply security.istio.io/v1/AuthorizationPolicy/backend/details-v1-from-waypoint: v1/Service/backend/details-v1 must allow traffic from its waypoint.\n  \ud83d\udd2e Apply security.istio.io/v1/AuthorizationPolicy/backend/details-v1-details-authz: Existing configuration is copied from policy backend/details-authz to be enforced at the waypoint.\n  \ud83d\udd2e Apply security.istio.io/v1/AuthorizationPolicy/backend/ratings-from-waypoint: v1/Service/backend/ratings must allow traffic from its waypoint.\n  \ud83d\udd2e Apply security.istio.io/v1/AuthorizationPolicy/backend/ratings-ratings-authz: Existing configuration is copied from policy backend/ratings-authz to be enforced at the waypoint.\n  \ud83d\udd2e Apply security.istio.io/v1/AuthorizationPolicy/backend/ratings-v1-from-waypoint: v1/Service/backend/ratings-v1 must allow traffic from its waypoint.\n  \ud83d\udd2e Apply security.istio.io/v1/AuthorizationPolicy/backend/ratings-v1-ratings-authz: Existing configuration is copied from policy backend/ratings-authz to be enforced at the waypoint.\n  \u2139 Recommended policies written to /tmp/istio-migrate/recommended-policies.yaml\n</code></pre> <p>We get a mention that the waypoint will be used for specific backend services. We make a mental note of that.</p> <p>The salient section tells us what we expected:  that our authorization policies must be retrofitted to use a <code>targetRefs</code> field.</p> <p>Rather than do the work ourselves, the tool has provided the resources in the file <code>recommended-policies.yaml</code>.</p>"},{"location":"migrate/#apply-retrofitted-authorization-policies","title":"Apply retrofitted authorization policies","text":"<p>It's worth mentioned that we are not yet deleting any existing authorization policies. Rather, we add the equivalent policies that will function in the context of the waypoints.</p> <pre><code>kubectl apply -f /tmp/istio-migrate/recommended-policies.yaml\n</code></pre> <p>A close look at the recommended policies shows that the tool is doing its due diligence to permit requests that target either the <code>ratings</code> and <code>ratings-v1</code> services, and similarly for the <code>details</code> and <code>details-v1</code> services.</p> <p>A closer look at the recommended policies reveals two things:</p> <ol> <li>The recommended policies include L4 authorization policies explicitly allowing the waypoint to communicate with the target service (<code>details</code>, <code>ratings</code>).  This is technically not required for the system to function, but it ensures that only the waypoint can communicate with the service (i.e. that no client bypasses the waypoint).</li> <li>The tool is doing its due diligence to permit requests that target either the <code>ratings</code> and <code>ratings-v1</code> services, and similarly for the <code>details</code> and <code>details-v1</code> services.</li> </ol>"},{"location":"migrate/#bind-the-waypoint-to-the-services","title":"Bind the waypoint to the services","text":"<p>Another run of the assistant points this out:</p> <pre><code>\u2022 Starting phase use-waypoints...\n\u26a0 Phase use-waypoints has recommendations!\n  \u26a0 Waypoint backend/waypoint is not used by any services.\n  \ud83d\udd2e Service v1/Service/backend/details requires a waypoint, but is not configured to use one. To configure it: kubectl label service -n backend details istio.io/use-waypoint=waypoint\n  \ud83d\udd2e Service v1/Service/backend/details-v1 requires a waypoint, but is not configured to use one. To configure it: kubectl label service -n backend details-v1 istio.io/use-waypoint=waypoint\n  \ud83d\udd2e Service v1/Service/backend/ratings requires a waypoint, but is not configured to use one. To configure it: kubectl label service -n backend ratings istio.io/use-waypoint=waypoint\n  \ud83d\udd2e Service v1/Service/backend/ratings-v1 requires a waypoint, but is not configured to use one. To configure it: kubectl label service -n backend ratings-v1 istio.io/use-waypoint=waypoint\n</code></pre> <p>It suggests binding the waypoint to our services by labeling each service with the <code>istio.io/use-waypoint</code> conventional label.</p> <p>Here we know that in addition to <code>ratings</code> and <code>details</code>, we must also label <code>reviews</code> services to use the waypoint, in order to support the traffic policy that is in place for <code>reviews</code>.</p> <p>It seems silly to label every single service in the <code>backend</code> namespace. Since in this case all workloads in <code>backend</code> should be enrolled to use the waypoint, let's just label the namespace:</p> <pre><code>kubectl label namespace backend istio.io/use-waypoint=waypoint\n</code></pre> <p>Re-run the assistant to validate that all services have the associated waypoint.</p>"},{"location":"migrate/#switch-to-ambient-mode","title":"Switch to ambient mode","text":"<p>It's time to finally switch to ambient mode.</p>"},{"location":"migrate/#remove-the-istio-injection-labels","title":"Remove the <code>istio-injection</code> labels","text":"<pre><code>kubectl label namespace frontend istio-injection-\nkubectl label namespace backend istio-injection-\n</code></pre>"},{"location":"migrate/#add-the-dataplane-mode-label","title":"Add the <code>dataplane-mode</code> label","text":"<pre><code>kubectl label namespace frontend istio.io/dataplane-mode=ambient\nkubectl label namespace backend istio.io/dataplane-mode=ambient\n</code></pre> <p>This label will ensure that ztunnel intercepts traffic in and out of our workloads.</p> <p>We can finally remove the sidecars by restarting the workloads:</p> <pre><code>kubectl rollout restart deploy -n frontend\nkubectl rollout restart deploy -n backend\n</code></pre>"},{"location":"migrate/#validate","title":"Validate","text":"<p>Verify that all pods in <code>frontend</code> and <code>backend</code> have a single container:</p> <pre><code>kubectl get pod -n frontend\nkubectl get pod -n backend\n</code></pre> <p>The <code>istioctl</code> CLI also provides <code>ztunnel-config</code> commands to verify the traffic traveling through ztunnel and waypoint proxies, and assigned workload identity certificates:</p> <ol> <li> <p>Verify that workloads use the HBONE protocol:</p> <pre><code>istioctl ztunnel-config workload\n</code></pre> <pre><code>NAMESPACE     POD NAME                                ADDRESS      NODE                    WAYPOINT PROTOCOL\nbackend       details-v1-76cb4f574f-nqhtw             10.42.0.40   k3d-my-cluster-server-0 None     HBONE\nbackend       ratings-v1-5bf4c88c5c-qbnq5             10.42.0.39   k3d-my-cluster-server-0 None     HBONE\nbackend       reviews-v1-6899c69cc5-zqmbb             10.42.0.43   k3d-my-cluster-server-0 None     HBONE\nbackend       reviews-v2-74dd9df8fc-2z62b             10.42.0.42   k3d-my-cluster-server-0 None     HBONE\nbackend       reviews-v3-5598c69cc5-8jzld             10.42.0.41   k3d-my-cluster-server-0 None     HBONE\nbackend       waypoint-56f487d8f8-q9qpk               10.42.0.44   k3d-my-cluster-server-0 None     TCP\nfrontend      curl-678c94dfbb-bqwph                   10.42.0.37   k3d-my-cluster-server-0 None     HBONE\nfrontend      productpage-v1-5bf9bf9f89-w6k5m         10.42.0.38   k3d-my-cluster-server-0 None     HBONE\n</code></pre> </li> <li> <p>Verify the services associated with the waypoint in the <code>backend</code> namespace:</p> <pre><code>istioctl ztunnel-config service\n</code></pre> <pre><code>NAMESPACE     SERVICE NAME   SERVICE VIP   WAYPOINT ENDPOINTS\nbackend       details        10.43.87.252  waypoint 1/1\nbackend       details-v1     10.43.121.191 waypoint 1/1\nbackend       ratings        10.43.18.135  waypoint 1/1\nbackend       ratings-v1     10.43.154.253 waypoint 1/1\nbackend       reviews        10.43.176.233 waypoint 3/3\nbackend       reviews-v1     10.43.135.223 waypoint 1/1\nbackend       reviews-v2     10.43.73.229  waypoint 1/1\nbackend       reviews-v3     10.43.114.154 waypoint 1/1\nbackend       waypoint       10.43.41.47   None     1/1\nfrontend      curl           10.43.65.249  None     1/1\nfrontend      productpage    10.43.70.80   None     1/1\nistio-ingress gateway-istio  10.43.246.228 None     1/1\n</code></pre> </li> <li> <p>Verify that all workloads are assigned workload identities:</p> <pre><code>istioctl ztunnel-config certificate\n</code></pre> <pre><code>CERTIFICATE NAME                                               TYPE     STATUS        VALID CERT     SERIAL NUMBER                        NOT AFTER                NOT BEFORE\nspiffe://cluster.local/ns/backend/sa/bookinfo-details          Leaf     Available     true           f0bc69c12ed191f83365b2297890f248     2025-06-06T04:54:09Z     2025-06-05T04:52:09Z\nspiffe://cluster.local/ns/backend/sa/bookinfo-details          Root     Available     true           c4cc571dc92335d57cb6cf3ab78f99a8     2035-06-02T08:05:55Z     2025-06-04T08:05:55Z\nspiffe://cluster.local/ns/backend/sa/bookinfo-ratings          Leaf     Available     true           9f4722ba68e73146fa5c498fcacb5270     2025-06-06T04:54:09Z     2025-06-05T04:52:09Z\nspiffe://cluster.local/ns/backend/sa/bookinfo-ratings          Root     Available     true           c4cc571dc92335d57cb6cf3ab78f99a8     2035-06-02T08:05:55Z     2025-06-04T08:05:55Z\nspiffe://cluster.local/ns/backend/sa/bookinfo-reviews          Leaf     Available     true           8ad4912f768ac3f986e8d0014947af5a     2025-06-06T04:54:09Z     2025-06-05T04:52:09Z\nspiffe://cluster.local/ns/backend/sa/bookinfo-reviews          Root     Available     true           c4cc571dc92335d57cb6cf3ab78f99a8     2035-06-02T08:05:55Z     2025-06-04T08:05:55Z\nspiffe://cluster.local/ns/frontend/sa/bookinfo-productpage     Leaf     Available     true           49cd2a29fb479144ee898135a71c4ab9     2025-06-06T04:54:16Z     2025-06-05T04:52:16Z\nspiffe://cluster.local/ns/frontend/sa/bookinfo-productpage     Root     Available     true           c4cc571dc92335d57cb6cf3ab78f99a8     2035-06-02T08:05:55Z     2025-06-04T08:05:55Z\nspiffe://cluster.local/ns/frontend/sa/curl                     Leaf     Available     true           ffe564539de3ecccdbe4d53ef6230f05     2025-06-06T04:54:16Z     2025-06-05T04:52:16Z\nspiffe://cluster.local/ns/frontend/sa/curl                     Root     Available     true           c4cc571dc92335d57cb6cf3ab78f99a8     2035-06-02T08:05:55Z     2025-06-04T08:05:55Z\n</code></pre> </li> </ol>"},{"location":"migrate/#assistant-one-more-time","title":"Assistant, one more time","text":"<pre><code>gloo ambient migrate\n</code></pre> <p>Here is the output:</p> <pre><code>\u2022 Starting phase policy-simplification...\n\u26a0 Phase policy-simplification has recommendations!\n  \ud83d\udd2e AuthorizationPolicy is migrated and can be deleted: kubectl delete authorizationpolicies.security.istio.io -n backend details-authz\n  \ud83d\udd2e AuthorizationPolicy is migrated and can be deleted: kubectl delete authorizationpolicies.security.istio.io -n backend ratings-authz\n</code></pre> <p>The only task remaining, it appears, is to remove the now redundant, original authorization policies for <code>details</code> and <code>ratings</code> services.</p> <p>Make it so:</p> <pre><code>kubectl delete authorizationpolicies.security.istio.io -n backend details-authz\nkubectl delete authorizationpolicies.security.istio.io -n backend ratings-authz\n</code></pre> <p>Finally, <code>gloo ambient migrate</code> should return \"all-green\" output.</p> <p>But this does not, in my opinion, replace the need to verify for ourselves that everything functions as expected..</p>"},{"location":"migrate/#test-everything","title":"Test everything","text":""},{"location":"migrate/#test-ingress","title":"Test Ingress","text":"<p>Capture the external IP address of the Gateway:</p> <pre><code>export GW_IP=$(kubectl get gtw -n istio-ingress gateway \\\n  -ojsonpath='{.status.addresses[0].value}')\n</code></pre> <p>Make a curl request to the ingress gateway using the configured hostname <code>bookinfo.exmaple.com</code>:</p> <pre><code>curl -s bookinfo.example.com/productpage --resolve bookinfo.example.com:80:$GW_IP | grep title\n</code></pre>"},{"location":"migrate/#test-authorization-policies","title":"Test authorization policies","text":"<ol> <li> <p>A request from an unauthorized workload to the <code>productpage</code> service should be denied:</p> <pre><code>kubectl exec deploy/curl -n frontend -- \\\n  curl -s --head productpage:9080/productpage\n</code></pre> </li> <li> <p>A request from an unauthorized workload to the <code>ratings</code> service should be denied:</p> <pre><code>kubectl exec deploy/curl -n frontend -- \\\n  curl -s ratings.backend:9080/ratings/123\n</code></pre> <p>It should produce a response saying <code>RBAC: access denied</code>.</p> </li> <li> <p>A request from an unauthorized workload to the <code>details</code> service should be denied:</p> <pre><code>kubectl exec deploy/curl -n frontend -- \\\n  curl -s details.backend:9080/details/123\n</code></pre> </li> <li> <p>A request through the ingress gateway to product page and upstream should succeed:</p> <pre><code>curl -s --head bookinfo.example.com/productpage \\\n  --resolve bookinfo.example.com:80:$GW_IP\n</code></pre> </li> </ol>"},{"location":"migrate/#test-traffic-policy","title":"Test traffic policy","text":"<p>Verify that all requests are routed to <code>reviews-v3</code> by making repeated calls to <code>productpage</code>:</p> <pre><code>curl -s bookinfo.example.com/productpage --resolve bookinfo.example.com:80:$GW_IP | grep \"reviews-\"\n</code></pre>"},{"location":"migrate/#summary","title":"Summary","text":"<p>We are running in ambient mode, and our mesh policies continue to function.</p> <p>From a resource consumption point of view, we are now running a single waypoint, compared to one per pod back when we were running in sidecar mode.</p>"},{"location":"migration-plan/","title":"Migration plan","text":"<p>Fundamentally, moving to ambient means removing all of our sidecars and replacing them with a combination of layer 4 and layer 7 proxies. See the ambient overview in the Istio docs for more information.</p> <p>The layer 4 proxies are a DaemonSet known as ztunnel, while the layer 7 components are known as waypoints. Unlike sidecars, waypoints are optional (installed as needed) and deployed separately from your workloads. Operationally, this is an advantage, as the platform networking concerns are in no way coupled to your deployments.</p> <p>Some ambient installations may not even require any waypoints, in situations where all mesh policies remain at layer 4.</p>"},{"location":"migration-plan/#analysis","title":"Analysis","text":""},{"location":"migration-plan/#where-do-we-need-waypoints","title":"Where do we need Waypoints?","text":"<p>We must triage our mesh policies in terms of which do and do not require layer 7 proxies in order to function.</p> <p>For example, of the three Authorization policies we have in place, the one for the <code>productpage</code> service is purely layer 4.  On the other hand, the authorization policies for the <code>ratings</code> and <code>details</code> services require an evaluation of the HTTP method (GET or POST), and so require a waypoint.</p> <p>The traffic policy that governs how requests are routed to the <code>reviews</code> service also requires a waypoint, since we are performing HTTP routing.</p> <p>We come to the conclusion thhen that the <code>productpage</code> service does not require a waypoint. On the other hand, the backend services do, either to support their layer 7 authorization policies (<code>ratings</code> and <code>details</code>), or to support their traffic policies (<code>reviews</code>).</p>"},{"location":"migration-plan/#how-many-waypoints","title":"How many waypoints?","text":"<p>Another decision that must be made is whether to dedicate a waypoint for each service, or whether we can use a single Waypoint to proxy multiple services.</p> <p>In this specific scenario, all of these backend services are related, and it makes sense to consider deploying a single waypoint responsible for all three.</p> <p>This pattern of using a single waypoint per namespace is often a perfect middle-ground between too many waypoints (one per service, as in sidecar mode), and too few waypoints (a single monolithic waypoint for way too many services).</p>"},{"location":"migration-plan/#the-plan","title":"The plan","text":""},{"location":"migration-plan/#upgrade-istio-to-ambient-mode","title":"Upgrade Istio to ambient mode","text":"<p>Upgrading Istio to run in ambient mode entails two specific actions:</p> <ul> <li>Upgrade the existing Helm releases to run in ambient mode (<code>--set profile=ambient</code>).</li> <li>Install the missing ztunnel component.</li> </ul>"},{"location":"migration-plan/#deploy-the-waypoint","title":"Deploy the waypoint","text":"<p>After the upgrade to ambient mode is a good time to provision the waypoint that will proxy our backend services.</p>"},{"location":"migration-plan/#retrofit-authorization-policies","title":"Retrofit authorization policies","text":"<p>Our AuthorizationPolicies will not function in ambient mode in their current form. Per Considerations for authorization policies, the policies must have a <code>targetRefs</code> which attaches them to their waypoint.</p> <p>We will derive a new set of ambient-compatible authorization policies and apply them in advance of switching to ambient mode.</p>"},{"location":"migration-plan/#switch-the-workloads-to-be-part-of-the-ambient-mesh","title":"Switch the workloads to be part of the ambient mesh","text":"<p>We will replace sidecar injection with making the workloads a part of the ambient mesh. Istio has distinct conventions for each, by labeling workloads, or more idiomatically their namespaces.</p> <p>This switch will necessitate a final restart of the workloads in order to remove their sidecars.</p>"},{"location":"migration-plan/#the-migration-tool","title":"The migration tool","text":"<p>Even with a migration plan in place, it's important to have our migration supported by tools which inspect our environment and give us the feedback we need to make sure we haven't left anything out.</p> <p>Solo.io publishes a comprehensive migration tool that we will use, by running it multiple times during the migration process in order to get the feedback necessary to know that we remain on the right track.</p> <p>The tool goes as far as even producing transformed policies that are compatible with ambient mesh, saving us the effort of doing that work by hand. It's also a great way to avoid performing certain steps manually, which are error-prone.</p> <p>The tool will help us validate where we stand during the migration process, and that we have completed our migration and not left out any steps.</p> <p>If we forget to perform a step, the tool will remind us of the fact.</p>"},{"location":"pre-analysis/","title":"Initial Considerations","text":""},{"location":"pre-analysis/#the-istio-cni-node-agent","title":"The Istio CNI node agent","text":"<p>In sidecar mode, Istio provides two ways for proxies to intercept traffic in and out of workloads:</p> <ol> <li>Iptables rules can be applied to route incoming and outgoing traffic to the sidecar on conventional ports</li> <li>The Istio CNI node agent is a newer method that was introduced to remove the requirement of running privileged containers to configure traffic redirection.</li> </ol> <p>As you plan your migration to ambient, your first consideration should be to migrate to using the Istio CNI node agent, as it is a requirement for ambient mode.</p>"},{"location":"pre-analysis/#the-kubernetes-gateway-api","title":"The Kubernetes Gateway API","text":"<p>The Kubernetes Gateway API is quickly becoming the new standard for implementing traffic policy, both at ingress and in the mesh.</p> <p>Istio has embraced the Kubernetes Gateway API, and ambient mode depends on it. The good news is that Istio supports the Gateway API in sidecar mode as well.</p> <p>Here too, as the Kubernetes gateway API becomes a requirement for Ambient, a first step towards migrating to ambient is opting to replace the use of the more venerable Istio APIs such as VirtualServices, Istio Gateways, and DestinationRules (for the purpose of defining subsets) with the newer Gateway API throughout.</p> <p>An advantage of performing this migration is gaining the ability to provision gateways dynamically at runtime, which provides increased flexibility.</p>"},{"location":"pre-analysis/#next","title":"Next..","text":"<p>In the next section, as we install Istio in sidecar mode, we opt to install the Istio CNI.</p> <p>Similarly, when configuring gateways and defining traffic policy, we opt for the newer Gateway API.</p> <p>Both decisions will put us in the position to focus on the migration to sidecarless without having to deal with these additional concerns.</p>"},{"location":"setup/","title":"Setup","text":"<p>The objective of this activity is to construct an initial state, where:</p> <ol> <li>Istio is installed in sidecar mode.</li> <li>The sample application, <code>bookinfo</code>, is deployed with sidecars.</li> <li>An ingress gateway is deployed, and configured to route requests to the <code>productpage</code> service.</li> <li>A set of L4 and L7 authorization policies are in place and functioning.</li> <li>A traffic policy is in place that routes all requests for the <code>reviews</code> service to the <code>reviews-v3</code> workload.</li> </ol> <p></p> <p>You will find all referenced artifacts in the accompanying GitHub repository.</p>"},{"location":"setup/#provisioning-a-kubernetes-cluster","title":"Provisioning a Kubernetes cluster","text":"<p>Feel free to provision a Kubernetes cluster of your choice, locally or in the cloud.</p> <p>The following snippet installs a local Kubernetes cluster with k3d.  For more information, see here.</p> <pre><code>k3d cluster create my-cluster \\\n    --api-port 6443 \\\n    --k3s-arg \"--disable=traefik@server:0\" \\\n    --port 80:80@loadbalancer \\\n    --port 443:443@loadbalancer\n</code></pre>"},{"location":"setup/#install-istio-in-sidecar-mode","title":"Install Istio in sidecar mode","text":"<p>Per the instructions for installing Istio in sidecar mode with Helm:</p> <p>Configure the Helm repository:</p> <pre><code>helm repo add istio https://istio-release.storage.googleapis.com/charts\nhelm repo update\n</code></pre> <p>Install the Istio CRDs:</p> <pre><code>helm install istio-base istio/base -n istio-system \\\n  --set defaultRevision=default --create-namespace\n</code></pre> <p>Install the Istio CNI:</p> <pre><code>helm install istio-cni istio/cni -n istio-system \\\n  --set global.platform=k3d --wait\n</code></pre> <p>About the <code>global.platform</code> flag</p> <p>The <code>global.platform</code> flag is a requirement on specific platforms when installing the Istio CNI.</p> <p>Install the <code>istiod</code> control plane:</p> <pre><code>helm install istiod istio/istiod -n istio-system --wait\n</code></pre>"},{"location":"setup/#validate","title":"Validate","text":"<p>Verify that both <code>istiod</code> and <code>istio-cni</code> pods are in Running state, in the <code>istio-system</code> namespace:</p> <pre><code>kubectl get pod -n istio-system\n</code></pre> <p>List the helm releases in <code>istio-system</code>:</p> <pre><code>helm ls -n istio-system\n</code></pre>"},{"location":"setup/#deploy-bookinfo","title":"Deploy <code>bookinfo</code>","text":"<p>In this scenario, the <code>bookinfo</code> services are split across two namespaces:</p> <ul> <li>the <code>frontend</code> namespace hosts the <code>productpage</code> service</li> <li>the <code>backend</code> namespace hosts the services upstream from it: <code>reviews</code>, <code>ratings</code>, and <code>details</code></li> </ul> <p>Create the namespace:</p> <pre><code>kubectl create ns frontend\n</code></pre> <p>Label the namespace for sidecar injection:</p> <pre><code>kubectl label ns frontend istio-injection=enabled\n</code></pre> <p>Apply the manifests:</p> <pre><code>kubectl apply -f artifacts/bookinfo-frontend.yaml -n frontend \n</code></pre> <p>Repeat for the <code>backend</code> namespace:</p> <pre><code>kubectl create ns backend\nkubectl label ns backend istio-injection=enabled\nkubectl apply -f artifacts/bookinfo-backend.yaml -n backend\n</code></pre>"},{"location":"setup/#validate_1","title":"Validate","text":"<p>Verify that all pods have two containers, implying that the sidecar injection took place:</p> <pre><code>kubectl get pod -n frontend\nkubectl get pod -n backend\n</code></pre> <p>To help verify that the services are functioning, deploy a <code>curl</code> image to the cluster:</p> <pre><code>kubectl apply -n frontend -f https://raw.githubusercontent.com/istio/istio/refs/heads/master/samples/curl/curl.yaml\n</code></pre> <p>Make a test call to the <code>ratings</code> service:</p> <pre><code>kubectl exec deploy/curl -n frontend -- curl -s ratings.backend:9080/ratings/123 | jq\n</code></pre> <p>Call the <code>reviews</code> service:</p> <pre><code>kubectl exec deploy/curl -n frontend -- curl -s reviews.backend:9080/reviews/123 | jq\n</code></pre> <p>Finally, call the <code>productpage</code> service:</p> <pre><code> kubectl exec deploy/curl -n frontend -- curl -s productpage:9080/productpage | grep title\n</code></pre> <p>Make sure the calls succeed.</p>"},{"location":"setup/#configure-an-ingress-gateway","title":"Configure an ingress gateway","text":"<p>We have the option to use either the older Istio-specific method of statically provisioning a gateway with Helm, or the Kubernetes Gateway API which allows for the dynamic provisioning of gateways.</p> <p>We opt for the latter.</p> <p>Install the Kubernetes Gateway API standard channel CRDs:</p> <pre><code>kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml\n</code></pre> <p>Create the namespace where the Gateway is to be provisioned:</p> <pre><code>kubectl create ns istio-ingress\n</code></pre> <p>Review the Gateway configuration:</p> gateway.yaml<pre><code>---\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: gateway\nspec:\n  gatewayClassName: istio\n  listeners:\n  - name: http\n    hostname: \"bookinfo.example.com\"\n    port: 80\n    protocol: HTTP\n    allowedRoutes:\n      namespaces:\n        from: Selector\n        selector:\n            matchLabels:\n              kubernetes.io/metadata.name: frontend\n</code></pre> <p>The gateway is configured to allow the binding of routes defined in the namespace <code>frontend</code>.</p> <p>Apply the Gateway resource:</p> <pre><code>kubectl apply -f artifacts/gateway.yaml -n istio-ingress\n</code></pre> <p>Next, define an <code>HTTPRoute</code> to expose specific endpoints on the <code>productpage</code> service through the gateway:</p> ingress-route.yaml<pre><code>---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: productpage\nspec:\n  parentRefs:\n  - name: gateway\n    namespace: istio-ingress\n  hostnames: [\"bookinfo.example.com\"]\n  rules:\n  - matches:\n    - path:\n        type: Exact\n        value: /productpage\n    - path:\n        type: PathPrefix\n        value: /static\n    - path:\n        type: Exact\n        value: /login\n    - path:\n        type: Exact\n        value: /logout\n    - path:\n        type: PathPrefix\n        value: /api/v1/products\n    backendRefs:\n    - name: productpage\n      port: 9080\n</code></pre> <p>Apply the HTTPRoute:</p> <pre><code>kubectl apply -f artifacts/ingress-route.yaml -n frontend\n</code></pre>"},{"location":"setup/#validate_2","title":"Validate","text":"<p>Capture the external IP address of the Gateway:</p> <pre><code>export GW_IP=$(kubectl get gtw -n istio-ingress gateway \\\n  -ojsonpath='{.status.addresses[0].value}')\n</code></pre> <p>Make a curl request to the ingress gateway using the configured hostname <code>bookinfo.exmaple.com</code>:</p> <pre><code>curl -s bookinfo.example.com/productpage --resolve bookinfo.example.com:80:$GW_IP | grep title\n</code></pre>"},{"location":"setup/#configure-authorization-policies","title":"Configure authorization policies","text":"<p>You will apply three AuthorizationPolicy resources that establish the following policy:</p> <ol> <li>Only the ingress gateway should be able to make requests to the <code>productpage</code> service.</li> <li>Only <code>reviews</code> workloads can call the <code>ratings</code> service.</li> <li>Only <code>productpage</code> can make calls to the <code>details</code> service.</li> </ol> <p>Furthermore:</p> <ol> <li>The first policy will be a layer 4 policy that is concerned strictly with workload identity.</li> <li>The remaining policies have layer 7 aspects that allow only specific HTTP methods (for example, GET or POST).</li> </ol> <p>Review all three policies:</p> productpage-authz.yaml<pre><code>---\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: productpage-authz\nspec:\n  selector:\n    matchLabels:\n      app: productpage\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals:\n        - cluster.local/ns/istio-ingress/sa/gateway-istio\n</code></pre> <p>Note how the identity of the allowed caller is specified via the Istio spiffe id which is a function of the workload's location (namespace) and service account.</p> ratings-authz.yaml<pre><code>---\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: ratings-authz\nspec:\n  selector:\n    matchLabels:\n      app: ratings\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals:\n        - cluster.local/ns/backend/sa/bookinfo-reviews\n    to:\n    - operation:\n        methods: [\"GET\", \"POST\"]\n</code></pre> details-authz.yaml<pre><code>---\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: details-authz\nspec:\n  selector:\n    matchLabels:\n      app: details\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals:\n        - cluster.local/ns/frontend/sa/bookinfo-productpage\n    to:\n    - operation:\n        methods: [\"GET\"]\n</code></pre> <p>Apply all three policies:</p> <pre><code>kubectl apply -f artifacts/productpage-authz.yaml -n frontend\n</code></pre> <pre><code>kubectl apply -f artifacts/ratings-authz.yaml -n backend\n</code></pre> <pre><code>kubectl apply -f artifacts/details-authz.yaml -n backend\n</code></pre>"},{"location":"setup/#validate_3","title":"Validate","text":"<ol> <li> <p>A request from an unauthorized workload to the <code>productpage</code> service should be denied:</p> <pre><code>kubectl exec deploy/curl -n frontend -- \\\n  curl -s --head productpage:9080/productpage\n</code></pre> </li> <li> <p>A request from an unauthorized workload to the <code>ratings</code> service should be denied:</p> <pre><code>kubectl exec deploy/curl -n frontend -- \\\n  curl -s ratings.backend:9080/ratings/123\n</code></pre> <p>It should produce a <code>HTTP/1.1 403 Forbidden</code> response.</p> </li> <li> <p>A request from an unauthorized workload to the <code>details</code> service should be denied:</p> <pre><code>kubectl exec deploy/curl -n frontend -- \\\n  curl -s details.backend:9080/details/123\n</code></pre> </li> <li> <p>A request through the ingress gateway to product page and upstream should succeed:</p> <pre><code>curl -s --head bookinfo.example.com/productpage \\\n  --resolve bookinfo.example.com:80:$GW_IP\n</code></pre> </li> </ol>"},{"location":"setup/#configure-traffic-policies","title":"Configure traffic policies","text":"<p>When <code>productpage</code> makes requests against the <code>reviews</code> service, the requests are load-balanced across all three versions of the service.</p> <p>Verify this by making several requests to the <code>productpage</code> service and \"grepping\" for the keyword \"reviews-\":</p> <pre><code>curl -s bookinfo.example.com/productpage --resolve bookinfo.example.com:80:$GW_IP | grep -m 1 \"reviews-\"\n</code></pre> <p>Review the following traffic policy which will route all requests to <code>reviews-v3</code>:</p> route-reviews-v3.yaml<pre><code>---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: bookinfo-reviews\nspec:\n  parentRefs:\n  - name: reviews\n    kind: Service\n    group: \"\"\n  rules:\n  - backendRefs:\n    - name: reviews-v3\n      port: 9080\n</code></pre> <p>Apply the policy:</p> <pre><code>kubectl apply -f artifacts/route-reviews-v3.yaml -n backend\n</code></pre>"},{"location":"setup/#validate_4","title":"Validate","text":"<p>Verify that all requests are routed to <code>reviews-v3</code> by making repeated calls to <code>productpage</code>:</p> <pre><code>curl -s bookinfo.example.com/productpage --resolve bookinfo.example.com:80:$GW_IP | grep \"reviews-\"\n</code></pre>"},{"location":"setup/#summary","title":"Summary","text":"<p>We have configured our initial state:  a system of microservices functioning with Istio in sidecar mode, with a combination of L4 and L7 security policies, and a traffic policy applied to the <code>reviews</code> service.</p> <p>In the next section, we will work on migrating this system to Istio ambient mode.</p>"}]}